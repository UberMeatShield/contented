# The default limit for how many media elements can be returned in a single page
LIMIT=5000

# true|false Should it try to use the database or just an in memory version
USE_DATABASE="false"

# You can specify this here or override with the env DIR.  ie export DIR="/fq/dir" && buffalo dev
CONTENT_DIR=""

# The default location where the index.html is going to be placed (likely with js/css)
STATIC_RESOURCE_PATH="./public/build"
# For libraries like the Monaco editor
STATIC_LIBRARY_PATH="./public/static"

# Include only files by regex match on filename or content_type/mime type (AND Inclusion)
# So if you have the file match for filename, then it must also be image|video
INCLUDE_MEDIA_MATCH=""
INCLUDE_TYPES_MATCH="image|video|text|pdf"
INCLUDE_OPERATOR="AND"

# Exclude files by regex match on filename or content_type/mime type (AND Exclusion)
# If the match is "true" then the file is excluded, in this example type types match
# set to "" matches everything, and then DS_Store found => true (Nope!  Don't want it.)
EXCLUDE_MEDIA_MATCH="DS_Store"
EXCLUDE_TYPES_MATCH=""
EXCLUDE_OPERATOR="AND"

# When searching the tree it will only include or exclude these containers.
# Note that if you exclude it then it will not search under that container either.
INCLUDE_CONTAINER_MATCH=""
EXCLUDE_CONTAINER_MATCH="container_previews|DS_Store"

# If true then any container found not containing any media will be skipped.  This will
# NOT prevent subcontainers (dirs) under this container from being included if they have media.
EXCLUDE_EMPTY_CONTAINERS="true"

# Loading modifiers that alter how content is discovered.  Search depth determines how many
# directories down to look, exclude empty will not show containers without media, and the max
# will give up adding media in a single container past that limit.
MAX_SEARCH_DEPTH=1
MAX_MEDIA_PER_CONTAINER=90001

# When running the buffalo task db:preview make a preview if the file is > this size
CREATE_PREVIEW_SIZE=1024000

# Over a certain size it is faster to seek screen when creating gif vs running a filter
# on the entire video.  This can also make creating a palette faster (smaller output).
SEEK_SCREEN_OVER_SIZE=7168000

# Options are gif|screens|png
# gif is about a 30 frame over total length,
# screens is a set of TOTAL_SCREENS image previews evenly distributed through the 
# length of the video png is a single image taken about 10s in
PREVIEW_VIDEO_TYPE="screens"

# If we are using "screens" for PREVIEW_VIDEO_TYPE how many should be created by default
TOTAL_SCREENS=12

# Also for "screens" for PREVIEW_VIDEO_TYPE how much of the initial video should skip before the first screen 
# IMPORTANT: For ffmpeg using pallete gen it looks in the range 0-4 so 4 is the largest to skip, we could use
# glob but that will seemingly never work on windows.  ie: -pattern_type glob -i '*.png'
FIRST_SCREEN_OFFSET=4

# If a preview fails to create stop instead of progressing to the next media, if an item
# fails to preview then Corrupt=True will be set on the Media.
PREVIEW_CREATE_FAIL_IS_FATAL="false"

# Core count is how many processors are going to be available (used when creating previews)
CORE_COUNT=4

# Provide these to change video encodings using task db:encode
CODECS_TO_CONVERT=".*" 
CODECS_TO_IGNORE="hevc"
CODEC_FOR_CONVERSION="libx265"

# Optional path for the final destination of an encoded file
ENCODING_DESTINATION=""

# TODO: Add in options for removing files we successfully encoded?


# Splash page configuration (home)
SPLASH_CONTAINER_NAME="dir2"
SPLASH_RENDERER_TYPE="video"  # video|container
SPLASH_HTML_FILE="/Users/ubermeatshield/code/contented/example.htm"
SPLASH_TITLE="This will be the title in the first rendering card."
