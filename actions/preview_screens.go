package actions

import (
    "log"
	"fmt"
	"net/http"
    // "errors"
	"contented/models"
	"contented/managers"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (PreviewScreen)
// DB Table: Plural (preview_screens)
// Resource: Plural (PreviewScreens)
// Path: Plural (/preview_screens)
// View Template Folder: Plural (/templates/preview_screens/)

// PreviewScreensResource is the resource for the PreviewScreen model
type PreviewScreensResource struct {
	buffalo.Resource
}

// List gets all PreviewScreens. This function is mapped to the path
// GET /preview_screens
func (v PreviewScreensResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	previewScreens := &models.PreviewScreens{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all PreviewScreens from the DB
	if err := q.All(previewScreens); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("previewScreens", previewScreens)
		return c.Render(http.StatusOK, r.HTML("/preview_screens/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(previewScreens))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(previewScreens))
	}).Respond(c)
}

// Show gets the data for one PreviewScreen. This function is mapped to
// the path GET /preview_screens/{preview_screen_id}
func (v PreviewScreensResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PreviewScreen
	previewScreen := &models.PreviewScreen{}

	// To find the PreviewScreen the parameter preview_screen_id is used.
	if err := tx.Find(previewScreen, c.Param("preview_screen_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("previewScreen", previewScreen)

		return c.Render(http.StatusOK, r.HTML("/preview_screens/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(previewScreen))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(previewScreen))
	}).Respond(c)
}

// Create adds a PreviewScreen to the DB. This function is mapped to the
// path POST /preview_screens
func (v PreviewScreensResource) Create(c buffalo.Context) error {
    _, tx, err := managers.ManagerCanCUD(&c)
    if err != nil {
        return err
    }
	// Allocate an empty PreviewScreen
	previewScreen := &models.PreviewScreen{}

	// Bind previewScreen to the html form/JSON elements
	if err := c.Bind(previewScreen); err != nil {
		return err
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(previewScreen)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("previewScreen", previewScreen)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/preview_screens/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

    log.Printf("What the hell is going on %s", previewScreen.ID)
	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		return c.Render(http.StatusCreated, r.JSON(previewScreen))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(previewScreen))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(previewScreen))
	}).Respond(c)
}

// Update changes a PreviewScreen in the DB. This function is mapped to
// the path PUT /preview_screens/{preview_screen_id}
func (v PreviewScreensResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
    _, tx, err := managers.ManagerCanCUD(&c)
    if err != nil {
        return err
    }

	// Allocate an empty PreviewScreen
	previewScreen := &models.PreviewScreen{}

	if err := tx.Find(previewScreen, c.Param("preview_screen_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind PreviewScreen to the html form elements
	if err := c.Bind(previewScreen); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(previewScreen)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("previewScreen", previewScreen)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/preview_screens/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		//c.Flash().Add("success", T.Translate(c, "previewScreen.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/preview_screens/%v", previewScreen.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(previewScreen))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(previewScreen))
	}).Respond(c)
}

// Destroy deletes a PreviewScreen from the DB. This function is mapped
// to the path DELETE /preview_screens/{preview_screen_id}
func (v PreviewScreensResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
    _, tx, err := managers.ManagerCanCUD(&c)
    if err != nil {
        return err
    }

	// Allocate an empty PreviewScreen
	previewScreen := &models.PreviewScreen{}

	// To find the PreviewScreen the parameter preview_screen_id is used.
	if err := tx.Find(previewScreen, c.Param("preview_screen_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(previewScreen); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		//c.Flash().Add("success", T.Translate(c, "previewScreen.destroyed.success"))
		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/preview_screens")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(previewScreen))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(previewScreen))
	}).Respond(c)
}
