package actions

import (
    "contented/managers"
    "contented/models"
    //"errors"
    //"fmt"
    "github.com/gobuffalo/buffalo"
    //"github.com/gobuffalo/pop/v5"
    "github.com/gobuffalo/x/responder"
    "github.com/gofrs/uuid"
    "net/http"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Container)
// DB Table: Plural (containers)
// Resource: Plural (Containers)
// Path: Plural (/containers)
// View Template Folder: Plural (/templates/containers/)

// ContainersResource is the resource for the Container model
type ContainersResource struct {
    buffalo.Resource
}

// List gets all Containers. This function is mapped to the path
// GET /containers
func (v ContainersResource) List(c buffalo.Context) error {
    // Get the DB connection from the context

    man := managers.GetManager(&c)
    containers, err := man.ListContainersContext()
    if err != nil {
        return c.Error(http.StatusBadRequest, err)
    }

    // Maybe there is a cleaner way of doing all this but the browser just asks
    // for html defaults and I like to see the json.
    return responder.Wants("html", func(c buffalo.Context) error {
        return c.Render(200, r.JSON(containers))
    }).Wants("json", func(c buffalo.Context) error {
        return c.Render(200, r.JSON(containers))
    }).Wants("xml", func(c buffalo.Context) error {
        return c.Render(200, r.XML(containers))
    }).Respond(c)
}

// Show gets the data for one Container. This function is mapped to
// the path GET /containers/{container_id}
func (v ContainersResource) Show(c buffalo.Context) error {

    cID, err := uuid.FromString(c.Param("container_id"))
    if err != nil {
        return c.Error(http.StatusBadRequest, err)
    }

    // Get the DB connection from the context
    man := managers.GetManager(&c)
    container, err := man.GetContainer(cID)
    if err != nil {
        return c.Error(http.StatusNotFound, err)
    }

    return responder.Wants("html", func(c buffalo.Context) error {
        return c.Render(200, r.JSON(container))
    }).Wants("json", func(c buffalo.Context) error {
        return c.Render(200, r.JSON(container))
    }).Wants("xml", func(c buffalo.Context) error {
        return c.Render(200, r.XML(container))
    }).Respond(c)
}

// Create adds a Container to the DB. This function is mapped to the
// path POST /containers
func (v ContainersResource) Create(c buffalo.Context) error {
    // Allocate an empty Container
    _, tx, err := managers.ManagerCanCUD(&c)
    if err != nil {
        return err
    }

    // Bind container to the html form elements
    container := &models.Container{}
    if err := c.Bind(container); err != nil {
        return err
    }

    verrs, err := tx.ValidateAndCreate(container)
    if err != nil {
        return err
    }

    // Is there a cleaner buffalo way of doing this as always respond?
    if verrs.HasAny() {
        return responder.Wants("html", func(c buffalo.Context) error {
            return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
        }).Wants("json", func(c buffalo.Context) error {
            return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
        }).Wants("xml", func(c buffalo.Context) error {
            return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
        }).Respond(c)
    }

    return responder.Wants("html", func(c buffalo.Context) error {
        return c.Render(http.StatusCreated, r.JSON(container))
    }).Wants("json", func(c buffalo.Context) error {
        return c.Render(http.StatusCreated, r.JSON(container))
    }).Wants("xml", func(c buffalo.Context) error {
        return c.Render(http.StatusCreated, r.XML(container))
    }).Respond(c)
}

// Update changes a Container in the DB. This function is mapped to
// the path PUT /containers/{container_id}
func (v ContainersResource) Update(c buffalo.Context) error {
    // Get the DB connection from the context
    _, tx, err := managers.ManagerCanCUD(&c)
    if err != nil {
        return err
    }

    // Allocate an empty Container
    container := &models.Container{}
    if err := tx.Find(container, c.Param("container_id")); err != nil {
        return c.Error(http.StatusNotFound, err)
    }

    // Bind Container to the html form elements
    if err := c.Bind(container); err != nil {
        return err
    }
    verrs, err := tx.ValidateAndUpdate(container)
    if err != nil {
        return err
    }

    if verrs.HasAny() {
        // Make the errors available inside the html template
        return responder.Wants("html", func(c buffalo.Context) error {
            return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
        }).Wants("json", func(c buffalo.Context) error {
            return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
        }).Wants("xml", func(c buffalo.Context) error {
            return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
        }).Respond(c)
    }

    return responder.Wants("html", func(c buffalo.Context) error {
        return c.Redirect(http.StatusSeeOther, "/containers/%v", container.ID)
    }).Wants("json", func(c buffalo.Context) error {
        return c.Render(http.StatusOK, r.JSON(container))
    }).Wants("xml", func(c buffalo.Context) error {
        return c.Render(http.StatusOK, r.XML(container))
    }).Respond(c)
}

// Destroy deletes a Container from the DB. This function is mapped
// to the path DELETE /containers/{container_id}
func (v ContainersResource) Destroy(c buffalo.Context) error {
    // Get the DB connection from the context
    _, tx, err := managers.ManagerCanCUD(&c)
    if err != nil {
        return err
    }

    // Allocate an empty Container
    // To find the Container the parameter container_id is used.
    container := &models.Container{}
    if err := tx.Find(container, c.Param("container_id")); err != nil {
        return c.Error(http.StatusNotFound, err)
    }
    if err := tx.Destroy(container); err != nil {
        return err
    }

    return responder.Wants("html", func(c buffalo.Context) error {
        return c.Render(http.StatusOK, r.JSON(container))
    }).Wants("json", func(c buffalo.Context) error {
        return c.Render(http.StatusOK, r.JSON(container))
    }).Wants("xml", func(c buffalo.Context) error {
        return c.Render(http.StatusOK, r.XML(container))
    }).Respond(c)
}
