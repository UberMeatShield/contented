package actions

import (
    "log"
    "errors"
	"contented/models"
	"fmt"
	"net/http"

    "github.com/gofrs/uuid"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (MediaContainer)
// DB Table: Plural (media_containers)
// Resource: Plural (MediaContainers)
// Path: Plural (/media_containers)
// View Template Folder: Plural (/templates/media_containers/)

// MediaContainersResource is the resource for the MediaContainer model
type MediaContainersResource struct {
	buffalo.Resource
}

// List gets all MediaContainers. This function is mapped to the path
// GET /media_containers
func (v MediaContainersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context

    man := GetManager(&c)
    var mediaContainers *models.MediaContainers

    // Optional params suuuuck in GoLang
    c_id_str := c.Param("container_id")
    if c_id_str != "" {
        log.Printf("Attempting to get media using %s", c_id_str)
        c_id, err := uuid.FromString(c_id_str)
        if err != nil {
            return c.Error(http.StatusBadRequest, err)
        }
        mcs, q_err := man.ListMediaContext(c_id)
        if q_err != nil {
            return c.Error(http.StatusBadRequest, err)
        }
        mediaContainers = mcs
    } else {
        log.Printf("List all Media No Restriction on the container ID")
        mcs, err := man.ListAllMedia(1, man.GetCfg().Limit)
        if err != nil {
            return c.Error(http.StatusBadRequest, err)
        }
        mediaContainers = mcs
    }

	return responder.Wants("html", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(mediaContainers))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(mediaContainers))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(mediaContainers))
	}).Respond(c)
}

// Show gets the data for one MediaContainer. This function is mapped to
// the path GET /media_containers/{media_container_id}
func (v MediaContainersResource) Show(c buffalo.Context) error {
    man := GetManager(&c)

    // TODO: Make it actually just handle /media (page, number)
    uuid, err := uuid.FromString(c.Param("media_container_id"))
    if err != nil {
        return c.Error(http.StatusBadRequest, err)
    }

    mediaContainer, missing_err := man.GetMedia(uuid)
    if missing_err != nil {
		return c.Error(http.StatusNotFound, missing_err)
    }

	return responder.Wants("html", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(mediaContainer))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(mediaContainer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(mediaContainer))
	}).Respond(c)
}

// Create adds a MediaContainer to the DB. This function is mapped to the
// path POST /media_containers
func (v MediaContainersResource) Create(c buffalo.Context) error {
    man := GetManager(&c)
    if man.CanEdit() == false {
        return c.Error(
            http.StatusNotImplemented,
            errors.New("Edit not supported by this manager"),
        )
    }
	// Allocate an empty MediaContainer
	// Bind mediaContainer to the html form elements (probably not required?)
	mediaContainer := &models.MediaContainer{}
	if err := c.Bind(mediaContainer); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(mediaContainer)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(mediaContainer))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(mediaContainer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(mediaContainer))
	}).Respond(c)
}

// Update changes a MediaContainer in the DB. This function is mapped to
// the path PUT /media_containers/{media_container_id}
func (v MediaContainersResource) Update(c buffalo.Context) error {
    man := GetManager(&c)
    if man.CanEdit() == false {
        return c.Error(
            http.StatusNotImplemented,
            errors.New("Edit not supported by this manager"),
        )
    }
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty MediaContainer
	mediaContainer := &models.MediaContainer{}
	if err := tx.Find(mediaContainer, c.Param("media_container_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind MediaContainer to the html form elements
	if err := c.Bind(mediaContainer); err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate(mediaContainer)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(mediaContainer))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(mediaContainer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(mediaContainer))
	}).Respond(c)
}

// Destroy deletes a MediaContainer from the DB. This function is mapped
// to the path DELETE /media_containers/{media_container_id}
func (v MediaContainersResource) Destroy(c buffalo.Context) error {
    man := GetManager(&c)
    if man.CanEdit() == false {
        return c.Error(
            http.StatusNotImplemented,
            errors.New("Edit not supported by this manager"),
        )
    }
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	// Allocate an empty MediaContainer
	mediaContainer := &models.MediaContainer{}

	// To find the MediaContainer the parameter media_container_id is used.
	if err := tx.Find(mediaContainer, c.Param("media_container_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}
	if err := tx.Destroy(mediaContainer); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(mediaContainer))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(mediaContainer))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(mediaContainer))
	}).Respond(c)
}
